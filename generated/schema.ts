// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class tokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save tokenTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save tokenTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("tokenTransfer", id.toString(), this);
  }

  static load(id: string): tokenTransfer | null {
    return store.get("tokenTransfer", id) as tokenTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get nftId(): string {
    let value = this.get("nftId");
    return value.toString();
  }

  set nftId(value: string) {
    this.set("nftId", Value.fromString(value));
  }
}

export class tokenDetails extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save tokenDetails entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save tokenDetails entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("tokenDetails", id.toString(), this);
  }

  static load(id: string): tokenDetails | null {
    return store.get("tokenDetails", id) as tokenDetails | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }

  get transanctionHash(): string {
    let value = this.get("transanctionHash");
    return value.toString();
  }

  set transanctionHash(value: string) {
    this.set("transanctionHash", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }

  get creatorAddress(): Bytes {
    let value = this.get("creatorAddress");
    return value.toBytes();
  }

  set creatorAddress(value: Bytes) {
    this.set("creatorAddress", Value.fromBytes(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }
}

export class userBlacklist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save userBlacklist entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save userBlacklist entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("userBlacklist", id.toString(), this);
  }

  static load(id: string): userBlacklist | null {
    return store.get("userBlacklist", id) as userBlacklist | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get attempts(): i32 {
    let value = this.get("attempts");
    return value.toI32();
  }

  set attempts(value: i32) {
    this.set("attempts", Value.fromI32(value));
  }
}
